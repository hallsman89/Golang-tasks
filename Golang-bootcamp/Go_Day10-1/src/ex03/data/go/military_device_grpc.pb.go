// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: military_device.proto

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MilitaryDevice_Connect_FullMethodName = "/military_device.MilitaryDevice/Connect"
)

// MilitaryDeviceClient is the client API for MilitaryDevice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MilitaryDeviceClient interface {
	Connect(ctx context.Context, in *ConnectionParams, opts ...grpc.CallOption) (MilitaryDevice_ConnectClient, error)
}

type militaryDeviceClient struct {
	cc grpc.ClientConnInterface
}

func NewMilitaryDeviceClient(cc grpc.ClientConnInterface) MilitaryDeviceClient {
	return &militaryDeviceClient{cc}
}

func (c *militaryDeviceClient) Connect(ctx context.Context, in *ConnectionParams, opts ...grpc.CallOption) (MilitaryDevice_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &MilitaryDevice_ServiceDesc.Streams[0], MilitaryDevice_Connect_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &militaryDeviceConnectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MilitaryDevice_ConnectClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type militaryDeviceConnectClient struct {
	grpc.ClientStream
}

func (x *militaryDeviceConnectClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MilitaryDeviceServer is the server API for MilitaryDevice service.
// All implementations must embed UnimplementedMilitaryDeviceServer
// for forward compatibility
type MilitaryDeviceServer interface {
	Connect(*ConnectionParams, MilitaryDevice_ConnectServer) error
	mustEmbedUnimplementedMilitaryDeviceServer()
}

// UnimplementedMilitaryDeviceServer must be embedded to have forward compatible implementations.
type UnimplementedMilitaryDeviceServer struct {
}

func (UnimplementedMilitaryDeviceServer) Connect(*ConnectionParams, MilitaryDevice_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedMilitaryDeviceServer) mustEmbedUnimplementedMilitaryDeviceServer() {}

// UnsafeMilitaryDeviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MilitaryDeviceServer will
// result in compilation errors.
type UnsafeMilitaryDeviceServer interface {
	mustEmbedUnimplementedMilitaryDeviceServer()
}

func RegisterMilitaryDeviceServer(s grpc.ServiceRegistrar, srv MilitaryDeviceServer) {
	s.RegisterService(&MilitaryDevice_ServiceDesc, srv)
}

func _MilitaryDevice_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnectionParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MilitaryDeviceServer).Connect(m, &militaryDeviceConnectServer{stream})
}

type MilitaryDevice_ConnectServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type militaryDeviceConnectServer struct {
	grpc.ServerStream
}

func (x *militaryDeviceConnectServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

// MilitaryDevice_ServiceDesc is the grpc.ServiceDesc for MilitaryDevice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MilitaryDevice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "military_device.MilitaryDevice",
	HandlerType: (*MilitaryDeviceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _MilitaryDevice_Connect_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "military_device.proto",
}
