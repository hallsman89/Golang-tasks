/*
 * Candy Server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"github.com/GIT_USER_ID/GIT_REPO_ID/clib"
	"net/http"
)

// DefaultAPIService is a service that implements the logic for the DefaultAPIServicer
// This service should implement the business logic for every endpoint for the DefaultAPI API.
// Include any external packages or services that will be required by this service.
type DefaultAPIService struct {
}

// NewDefaultAPIService creates a default api service
func NewDefaultAPIService() DefaultAPIServicer {
	return &DefaultAPIService{}
}

// BuyCandy -
func (s *DefaultAPIService) BuyCandy(ctx context.Context, order BuyCandyRequest) (ImplResponse, error) {
	if order.CandyCount < 0 {
		return Response(http.StatusBadRequest, map[string]string{"error": "Invalid candyCount"}), nil
	}

	validCandyTypes := map[string]bool{"CE": true, "AA": true, "NT": true, "DE": true, "YR": true}
	if !validCandyTypes[order.CandyType] {
		return Response(http.StatusBadRequest, map[string]string{"error": "Invalid candyType"}), nil
	}

	candyPrice := getCandyPrice(order.CandyType)
	totalPrice := float64(order.CandyCount) * candyPrice
	if float64(order.Money) < totalPrice {
		diff := totalPrice - float64(order.Money)
		return Response(http.StatusBadRequest, map[string]interface{}{"error": "Not enough money", "required": diff}), nil
	}

	change := float64(order.Money) - totalPrice
	response := BuyCandyResponse{
		Change: change,
		Thanks: clib.CowSayMoo(),
	}

	return Response(http.StatusOK, response), nil
}

func getCandyPrice(candyType string) float64 {
	prices := map[string]float64{
		"CE": 10.0,
		"AA": 15.0,
		"NT": 17.0,
		"DE": 21.0,
		"YR": 23.0,
	}
	return prices[candyType]
}
