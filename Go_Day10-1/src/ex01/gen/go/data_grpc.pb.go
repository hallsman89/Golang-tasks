// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: data.proto

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MiliService_SendMessage_FullMethodName = "/data.MiliService/SendMessage"
)

// MiliServiceClient is the client API for MiliService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiliServiceClient interface {
	// Define your RPC methods here
	SendMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*InfoAboutConnection, error)
}

type miliServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMiliServiceClient(cc grpc.ClientConnInterface) MiliServiceClient {
	return &miliServiceClient{cc}
}

func (c *miliServiceClient) SendMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*InfoAboutConnection, error) {
	out := new(InfoAboutConnection)
	err := c.cc.Invoke(ctx, MiliService_SendMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiliServiceServer is the server API for MiliService service.
// All implementations must embed UnimplementedMiliServiceServer
// for forward compatibility
type MiliServiceServer interface {
	// Define your RPC methods here
	SendMessage(context.Context, *Message) (*InfoAboutConnection, error)
	mustEmbedUnimplementedMiliServiceServer()
}

// UnimplementedMiliServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMiliServiceServer struct {
}

func (UnimplementedMiliServiceServer) SendMessage(context.Context, *Message) (*InfoAboutConnection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedMiliServiceServer) mustEmbedUnimplementedMiliServiceServer() {}

// UnsafeMiliServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiliServiceServer will
// result in compilation errors.
type UnsafeMiliServiceServer interface {
	mustEmbedUnimplementedMiliServiceServer()
}

func RegisterMiliServiceServer(s grpc.ServiceRegistrar, srv MiliServiceServer) {
	s.RegisterService(&MiliService_ServiceDesc, srv)
}

func _MiliService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiliServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiliService_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiliServiceServer).SendMessage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

// MiliService_ServiceDesc is the grpc.ServiceDesc for MiliService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MiliService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "data.MiliService",
	HandlerType: (*MiliServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _MiliService_SendMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "data.proto",
}
